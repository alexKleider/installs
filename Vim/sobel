Vim Notes taken from Sobel's book by Alex Kleider
Sun Dec 27 17:48:32 PST 2009

$ view <file> == $ vim -R <file>  # open read only

showmode parameter is set by default
:set laststatus=2

^L redraws the screen (refresh)

^Ws == :split
^Wn == :split <new/empty file>
^Wq == :q
try :help windows
ZZ == :wq

$ vim -r  # to check for existence of swap files

Movement Commands
% move to matching brace (of same type at same nesting level.)

f/F<char> # move to next/previous occurrence of the character specified
t/T<char> # move to just before .. 
;  # repeats last [tTfF]

w/W & b/B  # to/back [n] word(s) (W & B blank delimited punctuation)
j/k +/-  # down/up; beginning of 'moved to' line (RETURN == +)
)/(  # move by sentence
}/{  # move by paragraph
H/M/L  # Home, Middle, Last part of screen
i/I  # latter begins at beginning of line
a/A
o/O  # open line beneath/above
r/R  # replace single/until esc

^V   # quote command i.e. to put esc sequences into a shell script
\    # quote within search strings

u/U  # undo last change; Undo all changes to current line
x/X  # deletes character under/before cursor
dl == x
d0 =~= d^  # delete from beginning of line; latter leaves leading spaces
d/text == delete up to next occurrence of text
dfc/dtc == delete up to (and including/but not including) c(haracter specified.
D == d$  # delete to end of line
cl == r
C     # change to end of line
cc    # change current line
dw  # trailing space deleted
cw  # trailing space retained
s/S  # deletes char/line and enters insert mode (S == cc); e.g. 5s
~  # changes case of char under cursor.

Search/Substitute:
Character: f/F and t/T
String: / or ?; n or N
Search strings are regular expressions:
-note special meaning of ^, $, ., \<word>\, *, [, ^, ]
^beginning of line, $ end of line, . any character, * 0 or more of preceding,
[char_set], [^char_set]
Substitute command syntax:
:[g][address]s/search-string/replacement-string[/option]
address: default is current line(.), n or n,m, /address-string/, .,.+n(arith)
	% == 1,$  (??0,$??)
search-string may be omitted if address consists of an address search-string
In replacement string: & is replaced by matched string.
option: g(lobal, c(heck: y(es, n(o, l(ast, a(ll, q(uit
:`m,.s/The/THE/g --> substitutes THE for The from marker to end of current line.

Misc. Commands:
J(oin
^G == :f  # status command
. Period repeats last change making command.

Buffers
Work Buffer: the file being edited
General Purpose Buffer
Named Buffers: "<char-name><delete or yank cmd> ;  "<char-name>p/P to put.
Numbered Buffers (record of what has been in the GPB) "<#>p u . sequence.
y return/d return yanks/deletes two lines
Y/yy/dd yank/delete whole current line
D deletes from cursor to end of line only i.e. Y!=D

Reading Files: :[address]r [filename] # address == where read is to go, 0 is OK
	default file is one being edited --> duplicate stuff???
Writing Files:	:[address]w[!] [filename]  # address == what is to be written
				# default file == that given by ^G or :f
		:[address]w>> filename  

Setting Parameters (in order of precedence:)  # :set all --> shows them all.
:set param[=value]		# :set --> list of non default set values.
VIMINIT: export VIMINIT='set param1 param2 ...' in ~/.bashrc or ~/.bash_profile
~/.vimrc containing lines such as set param[=value]
/etc/vimrc
Parameters of interest: number,nu list laststatus,ls=012 shiftwidth/sw=nn
	wrapmargin,wm=nn 

:e! restarts editing session (buffer changes are lost- you may want that.)
$ vim file1 file2 file3   # allows use of the following..
:en  # edit next file;	:en!  # forces file closure without a write
:e# closes current file and opens last file edited.
:erew  # rewind to first file again.

Macros (command mode) and Shortcuts (input mode) 
:map <key[sequence]> <Command mode action>	:map  --> lst of crnt mappings
	:map ^P j0P	# use ^V^P to insert the CNTL-P  ?? ^I doesn't work ??
:abbrev <sequence> <text2insert>
	command mode commands (i.e. :abbrev ZZ Alex Kleider) OK here.

Shell commands from within Vim
:sh	# spawns a new shell
:!cmd	# shell spawns a new shell just for the one command
![mvnt]!cmd	|  # uses address/current line is default as input to command
:<addr_str>!cmd |  # ..and output is inserted in place of the input.

Units of Measure
Char, Word (+/- blank delim,) Line, Sentence, Paragraph, Window
Repeat Factor

See also: http://linux.dbw.org/vi_short_ref.html

: options
number, nonumber, incsearch, ignorecase, smartcase, scrolloff=2,
wildmode=longest,list, cindent, compatible, nowrap, textwidth=72
scroll=10 (re U and D), scrolljump, scrolloff (latter 2 defaults are 1, -->3)
filetype off, set uc=0
expandtab
%retab

Search Options:
stop a long search with CTRL-C
ignorecase
smartcase
nowrapscan

Instant Word Search
* searches for word under cursor; # (or Brittish lb sign) backward word search
g* g# finds' words that contain word under cursor

Search Offset: (from beginning of search result)
/const/2 :  second line past next occurence
/const/b2 :  second character past (s is a synonym for b)
/const/e : puts cursor on last character of search string
/const/e-2 : puts cursor on n
/ : repeats same search with same offset
//5 : to specify a new offset
// : to nullify an offset.

Regular Expression Searching
suggest :set hlsearch
Reg Ex consists of a series of Atoms
\<Beginning_Word_Ending/> i.e. /for vs \<for\>
Atom followed by symbole is to be repeated.. times.
		*	>=0
		\+	>=1
		\=	0 or 1
Also Repeat Modifiers: a\{0,1}  ==  a\=
Special Atoms:
\a matches any letter; \a\a\a any three letters
\d matches any digit
Character Ranges:
[aeiou] [^aeiouAEIOU] ^ and - must be escaped
Character Classes:
Predefined Character Class [[:upper:]] = [A-Z]  [[:upper:][:lower:] = [A-Za-z]

alex@kleider.ca
